data_train_reg <- juice(rec_regression)
data_train_cla <- juice(rec_classification)
head(data_train_cla)
library(nnet)
multi_model <- multinom_reg(mode = "classification",
engine = "nnet") %>%
fit(formula=Delivery_Time ~ .,
data=data_train_cla, size = 10, maxit=100)
head(data_train_reg)
head(data_validation_reg)
head(data_validation_cla)
# Function to transform Location into City
transform_location <- function(Location){
if(Location %in% c("Mumbai", "Mumbai CST Area" , "Mumbai Central")){
return ("Mumbai")
} else if(Location %in% c("Bangalore", "Electronic City", "Marathalli", "Whitefield")){
return("Bangalore")
} else if(Location %in% c("India Gate", "Delhi", "Delhi University-GTB Nagar", "Delhi Cantt." , "Timarpur", "Noida")){
return("Delhi")
} else if(Location %in% c("Gurgoan", "Gurgaon")){
return("Gurgaon")
} else if(Location %in% c("Maharashtra", "Pune", "Pune University")){
return("Maharashtra")
} else if(Location %in% c("Hyderabad", "Begumpet", "Majestic")){
return("Hyderabad")
} else if(Location %in% c("Kolkata")){
return("Kolkata")
}
}
# Preprocess Pipeline
rec_regression <- recipe(Delivery_Time~., data = training(splitted)) %>%
step_select(-Restaurant) %>%
step_mutate(
Location =  word(Location, -1, sep=",") %>% trimws() %>% sapply(function(x) transform_location(x)),
Average_Cost = gsub('[\u20b9]|,', '', Average_Cost) %>% as.numeric(),
Minimum_Order = gsub('[\u20b9]|,', '', Minimum_Order) %>% as.numeric(),
Rating = as.character(Rating) %>% as.numeric(),
Votes = as.character(Votes) %>% as.numeric(),
Reviews = as.character(Reviews) %>% as.numeric(),
Delivery_Time = gsub('[ minutes]', '', Delivery_Time) %>%  as.numeric()
) %>%
step_dummy_extract(Cuisines, sep= ", ") %>%
step_mutate_at(starts_with("Cuisines"), fn = function(x)(as.factor(x)), skip=True) %>%
step_naomit(everything()) %>%
prep()
# Function to transform Location into City
transform_location <- function(Location){
if(Location %in% c("Mumbai", "Mumbai CST Area" , "Mumbai Central")){
return ("Mumbai")
} else if(Location %in% c("Bangalore", "Electronic City", "Marathalli", "Whitefield")){
return("Bangalore")
} else if(Location %in% c("India Gate", "Delhi", "Delhi University-GTB Nagar", "Delhi Cantt." , "Timarpur", "Noida")){
return("Delhi")
} else if(Location %in% c("Gurgoan", "Gurgaon")){
return("Gurgaon")
} else if(Location %in% c("Maharashtra", "Pune", "Pune University")){
return("Maharashtra")
} else if(Location %in% c("Hyderabad", "Begumpet", "Majestic")){
return("Hyderabad")
} else if(Location %in% c("Kolkata")){
return("Kolkata")
}
}
# Preprocess Pipeline
rec_regression <- recipe(Delivery_Time~., data = training(splitted)) %>%
step_select(-Restaurant) %>%
step_mutate(
Location =  word(Location, -1, sep=",") %>% trimws() %>% sapply(function(x) transform_location(x)),
Average_Cost = gsub('[\u20b9]|,', '', Average_Cost) %>% as.numeric(),
Minimum_Order = gsub('[\u20b9]|,', '', Minimum_Order) %>% as.numeric(),
Rating = as.character(Rating) %>% as.numeric(),
Votes = as.character(Votes) %>% as.numeric(),
Reviews = as.character(Reviews) %>% as.numeric(),
Delivery_Time = gsub('[ minutes]', '', Delivery_Time) %>%  as.numeric()
) %>%
step_dummy_extract(Cuisines, sep= ", ") %>%
step_mutate_at(starts_with("Cuisines"), fn = function(x)(as.factor(x)), skip=TRUE) %>%
step_naomit(everything()) %>%
prep()
rec_classification <- rec_regression %>%
step_mutate(Delivery_Time = as.factor(Delivery_Time)) %>%
prep()
data_train_reg <- juice(rec_regression)
data_train_cla <- juice(rec_classification)
head(data_train_reg)
data_validation_reg <- bake(rec_regression, testing(splitted))
data_validation_cla <- bake(rec_classification, testing(splitted))
head(data_validation_cla)
any(is.na(data_train_reg))
any(is.na(data_train_cla))
any(is.na(data_validation_reg))
any(is.na(data_validation_cla))
boxplot(Delivery_Time ~ Location, data = data_train_reg)
xtabs(~Location+Delivery_Time, data = data_train_reg)
reg_model <- linear_reg(mode = "regression",
engine = "lm") %>%
fit(formula=Delivery_Time ~ Location + Average_Cost + Minimum_Order + Rating + Votes + Reviews,
data=data_train_reg)
summary(reg_model$fit)
library(nnet)
multi_model <- multinom_reg(mode = "classification",
engine = "nnet") %>%
fit(formula=Delivery_Time ~ .,
data=data_train_cla, size = 10, maxit=100)
set.seed(190)
rf_model <- rand_forest(mode = "classification",
engine = "ranger",
mtry = 10,
trees = 1000) %>%
fit(Delivery_Time ~ ., data = data_train_cla)
data_validation_cla %>%
select(Delivery_Time) %>%
bind_cols(predict(rf_model, new_data=data_validation_cla)) %>%
accuracy(truth = Delivery_Time, .pred_class)
data_validation_cla %>%
select(Delivery_Time) %>%
bind_cols(predict(rf_model, new_data=data_validation_cla)) %>%
accuracy(truth = Delivery_Time, .pred_class)
View(data_train_reg)
View(data_train_cla)
View(data_validation_cla)
data_validation_cla$Cuisines_other %>% unique()
# Function to transform Location into City
transform_location <- function(Location){
if(Location %in% c("Mumbai", "Mumbai CST Area" , "Mumbai Central")){
return ("Mumbai")
} else if(Location %in% c("Bangalore", "Electronic City", "Marathalli", "Whitefield")){
return("Bangalore")
} else if(Location %in% c("India Gate", "Delhi", "Delhi University-GTB Nagar", "Delhi Cantt." , "Timarpur", "Noida")){
return("Delhi")
} else if(Location %in% c("Gurgoan", "Gurgaon")){
return("Gurgaon")
} else if(Location %in% c("Maharashtra", "Pune", "Pune University")){
return("Maharashtra")
} else if(Location %in% c("Hyderabad", "Begumpet", "Majestic")){
return("Hyderabad")
} else if(Location %in% c("Kolkata")){
return("Kolkata")
}
}
# Preprocess Pipeline
rec_regression <- recipe(Delivery_Time~., data = training(splitted)) %>%
step_select(-Restaurant) %>%
step_mutate(
Location =  word(Location, -1, sep=",") %>% trimws() %>% sapply(function(x) transform_location(x)),
Average_Cost = gsub('[\u20b9]|,', '', Average_Cost) %>% as.numeric(),
Minimum_Order = gsub('[\u20b9]|,', '', Minimum_Order) %>% as.numeric(),
Rating = as.character(Rating) %>% as.numeric(),
Votes = as.character(Votes) %>% as.numeric(),
Reviews = as.character(Reviews) %>% as.numeric(),
Delivery_Time = gsub('[ minutes]', '', Delivery_Time) %>%  as.numeric()
) %>%
step_dummy_extract(Cuisines, sep= ", ") %>%
step_mutate_at(starts_with("Cuisines"), fn = function(x)(as.factor(x)), skip=TRUE) %>%
step_select(-Cuisines_other) %>%
step_naomit(everything()) %>%
prep()
rec_classification <- rec_regression %>%
step_mutate(Delivery_Time = as.factor(Delivery_Time)) %>%
prep()
data_train_reg <- juice(rec_regression)
data_train_cla <- juice(rec_classification)
head(data_train_reg)
data_validation_reg <- bake(rec_regression, testing(splitted))
data_validation_cla <- bake(rec_classification, testing(splitted))
head(data_validation_cla)
reg_model <- linear_reg(mode = "regression",
engine = "lm") %>%
fit(formula=Delivery_Time ~ Location + Average_Cost + Minimum_Order + Rating + Votes + Reviews,
data=data_train_reg)
summary(reg_model$fit)
result <- data_validation_reg %>%
select(Delivery_Time) %>%
bind_cols(predict(reg_model, new_data = data_validation_reg))
library(MLmetrics)
MAPE(result$Delivery_Time, result$.pred)
library(nnet)
multi_model <- multinom_reg(mode = "classification",
engine = "nnet") %>%
fit(formula=Delivery_Time ~ .,
data=data_train_cla, size = 10, maxit=100)
data_validation_cla %>%
select(Delivery_Time) %>%
bind_cols(predict(multi_model, new_data=data_validation_cla)) %>%
accuracy(truth = Delivery_Time, .pred_class)
set.seed(190)
rf_model <- rand_forest(mode = "classification",
engine = "ranger",
mtry = 10,
trees = 1000) %>%
fit(Delivery_Time ~ ., data = data_train_cla)
data_validation_cla %>%
select(Delivery_Time) %>%
bind_cols(predict(rf_model, new_data=data_validation_cla)) %>%
accuracy(truth = Delivery_Time, .pred_class)
data_validation_cla %>%
select(Delivery_Time) %>%
bind_cols(predict(rf_model, new_data=data_validation_cla)) %>%
accuracy(truth = Delivery_Time, .pred_class)
install.packages("devtools")
devtools::install_github("teamalgoritma/AlgoritmaAcademy")
library(AlgoritmaAcademy)
getwd()
ao_score(path = "PythonforDataAnalystsP4DAQuiz-all_0.csv",
sheet_url = "https://docs.google.com/spreadsheets/d/1cGJ0pn9k9gKCBnceWVwaL9D7BBDMNjLh8uPYlaBlJi8/edit#gid=894012651",
sheet_name = "Rhea DA",
column_name = "P4DA",
max_score = 6,
email = "tria@algorit.ma")
library(dplyr)
install.packages("googlesheets4")
library(googlesheets4)
ao_score(path = "PythonforDataAnalystsP4DAQuiz-all_0.csv",
sheet_url = "https://docs.google.com/spreadsheets/d/1cGJ0pn9k9gKCBnceWVwaL9D7BBDMNjLh8uPYlaBlJi8/edit#gid=894012651",
sheet_name = "Rhea DA",
column_name = "P4DA",
max_score = 6,
email = "tria@algorit.ma")
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
library(dplyr)
library(tidyverse)
library(tidymodels)
library(readxl)
train_data <- read_excel("./dataset/Data_Train.xlsx")
test_data <- read_excel("./dataset/Data_Test.xlsx")
head(train_data)
str(train_data)
unique(train_data$Location)
unique(train_data$Cuisines)[1:10]
set.seed(100)
splitted <- initial_split(train_data, prop = 0.8, strata = 'Delivery_Time')
splitted
# Function to transform Location into City
transform_location <- function(Location){
if(Location %in% c("Mumbai", "Mumbai CST Area" , "Mumbai Central")){
return ("Mumbai")
} else if(Location %in% c("Bangalore", "Electronic City", "Marathalli", "Whitefield")){
return("Bangalore")
} else if(Location %in% c("India Gate", "Delhi", "Delhi University-GTB Nagar", "Delhi Cantt." , "Timarpur", "Noida")){
return("Delhi")
} else if(Location %in% c("Gurgoan", "Gurgaon")){
return("Gurgaon")
} else if(Location %in% c("Maharashtra", "Pune", "Pune University")){
return("Maharashtra")
} else if(Location %in% c("Hyderabad", "Begumpet", "Majestic")){
return("Hyderabad")
} else if(Location %in% c("Kolkata")){
return("Kolkata")
}
}
# Preprocess Pipeline
rec_regression <- recipe(Delivery_Time~., data = training(splitted)) %>%
step_select(-Restaurant) %>%
step_mutate(
Location =  word(Location, -1, sep=",") %>% trimws() %>% sapply(function(x) transform_location(x)),
Average_Cost = gsub('[\u20b9]|,', '', Average_Cost) %>% as.numeric(),
Minimum_Order = gsub('[\u20b9]|,', '', Minimum_Order) %>% as.numeric(),
Rating = as.character(Rating) %>% as.numeric(),
Votes = as.character(Votes) %>% as.numeric(),
Reviews = as.character(Reviews) %>% as.numeric(),
Delivery_Time = gsub('[ minutes]', '', Delivery_Time) %>%  as.numeric()
) %>%
step_dummy_extract(Cuisines, sep= ", ") %>%
step_mutate_at(starts_with("Cuisines"), fn = function(x)(as.factor(x)), skip=TRUE) %>%
step_select(-Cuisines_other) %>%
step_naomit(everything()) %>%
prep()
rec_classification <- rec_regression %>%
step_mutate(Delivery_Time = as.factor(Delivery_Time)) %>%
prep()
data_train_reg <- juice(rec_regression)
data_train_cla <- juice(rec_classification)
head(data_train_reg)
data_validation_reg <- bake(rec_regression, testing(splitted))
data_validation_cla <- bake(rec_classification, testing(splitted))
head(data_validation_cla)
any(is.na(data_train_reg))
any(is.na(data_train_cla))
any(is.na(data_validation_reg))
any(is.na(data_validation_cla))
boxplot(Delivery_Time ~ Location, data = data_train_reg)
xtabs(~Location+Delivery_Time, data = data_train_reg)
xtabs(~Rating+Delivery_Time, data = data_train_reg)
reg_model <- linear_reg(mode = "regression",
engine = "lm") %>%
fit(formula=Delivery_Time ~ Location + Average_Cost + Minimum_Order + Rating + Votes + Reviews,
data=data_train_reg)
summary(reg_model$fit)
library(nnet)
multi_model <- multinom_reg(mode = "classification",
engine = "nnet") %>%
fit(formula=Delivery_Time ~ .,
data=data_train_cla, size = 10, maxit=100)
set.seed(190)
rf_model <- rand_forest(mode = "classification",
engine = "ranger",
mtry = 10,
trees = 1000) %>%
fit(Delivery_Time ~ ., data = data_train_cla)
result <- data_validation_reg %>%
select(Delivery_Time) %>%
bind_cols(predict(reg_model, new_data = data_validation_reg))
library(MLmetrics)
MAPE(result$Delivery_Time, result$.pred)
data_validation_cla %>%
select(Delivery_Time) %>%
bind_cols(predict(multi_model, new_data=data_validation_cla)) %>%
accuracy(truth = Delivery_Time, .pred_class)
data_validation_cla %>%
select(Delivery_Time) %>%
bind_cols(predict(rf_model, new_data=data_validation_cla)) %>%
accuracy(truth = Delivery_Time, .pred_class)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
library(dplyr)
library(tidyverse)
library(tidymodels)
library(readxl)
train_data <- read_excel("./dataset/Data_Train.xlsx")
test_data <- read_excel("./dataset/Data_Test.xlsx")
head(train_data)
str(train_data)
unique(train_data$Location)
unique(train_data$Cuisines)[1:10]
set.seed(100)
splitted <- initial_split(train_data, prop = 0.8, strata = 'Delivery_Time')
splitted
# Function to transform Location into City
transform_location <- function(Location){
if(Location %in% c("Mumbai", "Mumbai CST Area" , "Mumbai Central")){
return ("Mumbai")
} else if(Location %in% c("Bangalore", "Electronic City", "Marathalli", "Whitefield")){
return("Bangalore")
} else if(Location %in% c("India Gate", "Delhi", "Delhi University-GTB Nagar", "Delhi Cantt." , "Timarpur", "Noida")){
return("Delhi")
} else if(Location %in% c("Gurgoan", "Gurgaon")){
return("Gurgaon")
} else if(Location %in% c("Maharashtra", "Pune", "Pune University")){
return("Maharashtra")
} else if(Location %in% c("Hyderabad", "Begumpet", "Majestic")){
return("Hyderabad")
} else if(Location %in% c("Kolkata")){
return("Kolkata")
}
}
# Preprocess Pipeline
rec_regression <- recipe(Delivery_Time~., data = training(splitted)) %>%
step_select(-Restaurant) %>%
step_mutate(
Location =  word(Location, -1, sep=",") %>% trimws() %>% sapply(function(x) transform_location(x)),
Average_Cost = gsub('[\u20b9]|,', '', Average_Cost) %>% as.numeric(),
Minimum_Order = gsub('[\u20b9]|,', '', Minimum_Order) %>% as.numeric(),
Rating = as.character(Rating) %>% as.numeric(),
Votes = as.character(Votes) %>% as.numeric(),
Reviews = as.character(Reviews) %>% as.numeric(),
Delivery_Time = gsub('[ minutes]', '', Delivery_Time) %>%  as.numeric()
) %>%
step_dummy_extract(Cuisines, sep= ", ") %>%
step_mutate_at(starts_with("Cuisines"), fn = function(x)(as.factor(x)), skip=TRUE) %>%
step_select(-Cuisines_other) %>%
step_naomit(everything()) %>%
prep()
rec_classification <- rec_regression %>%
step_mutate(Delivery_Time = as.factor(Delivery_Time)) %>%
prep()
data_train_reg <- juice(rec_regression)
data_train_cla <- juice(rec_classification)
head(data_train_reg)
data_validation_reg <- bake(rec_regression, testing(splitted))
data_validation_cla <- bake(rec_classification, testing(splitted))
head(data_validation_cla)
any(is.na(data_train_reg))
any(is.na(data_train_cla))
any(is.na(data_validation_reg))
any(is.na(data_validation_cla))
boxplot(Delivery_Time ~ Location, data = data_train_reg)
xtabs(~Location+Delivery_Time, data = data_train_reg)
xtabs(~Rating+Delivery_Time, data = data_train_reg)
reg_model <- linear_reg(mode = "regression",
engine = "lm") %>%
fit(formula=Delivery_Time ~ Location + Average_Cost + Minimum_Order + Rating + Votes + Reviews,
data=data_train_reg)
summary(reg_model$fit)
library(nnet)
multi_model <- multinom_reg(mode = "classification",
engine = "nnet") %>%
fit(formula=Delivery_Time ~ .,
data=data_train_cla, size = 10, maxit=100)
set.seed(190)
rf_model <- rand_forest(mode = "classification",
engine = "ranger",
mtry = 10,
trees = 1000) %>%
fit(Delivery_Time ~ ., data = data_train_cla)
result <- data_validation_reg %>%
select(Delivery_Time) %>%
bind_cols(predict(reg_model, new_data = data_validation_reg))
library(MLmetrics)
MAPE(result$Delivery_Time, result$.pred)
data_validation_cla %>%
select(Delivery_Time) %>%
bind_cols(predict(multi_model, new_data=data_validation_cla)) %>%
accuracy(truth = Delivery_Time, .pred_class)
data_validation_cla %>%
select(Delivery_Time) %>%
bind_cols(predict(rf_model, new_data=data_validation_cla)) %>%
accuracy(truth = Delivery_Time, .pred_class)
data_training_cla %>%
select(Delivery_Time) %>%
bind_cols(predict(multi_model, new_data=data_validation_cla)) %>%
accuracy(truth = Delivery_Time, .pred_class)
data_training_cla %>%
select(Delivery_Time) %>%
bind_cols(predict(multi_model, new_data=data_validation_cla)) %>%
accuracy(truth = Delivery_Time, .pred_class)
data_train_cla %>%
select(Delivery_Time) %>%
bind_cols(predict(multi_model, new_data=data_validation_cla)) %>%
accuracy(truth = Delivery_Time, .pred_class)
data_train_cla %>%
select(Delivery_Time) %>%
bind_cols(predict(multi_model, new_data=data_train_cla)) %>%
accuracy(truth = Delivery_Time, .pred_class)
data_train_cla %>%
select(Delivery_Time) %>%
bind_cols(predict(rf_model, new_data=data_train_cla)) %>%
accuracy(truth = Delivery_Time, .pred_class)
data_train_cla %>%
select(Delivery_Time) %>%
bind_cols(predict(rf_model, new_data=data_train_cla)) %>%
accuracy(truth = Delivery_Time, .pred_class)
data_validation_cla %>%
select(Delivery_Time) %>%
bind_cols(predict(rf_model, new_data=data_validation_cla)) %>%
accuracy(truth = Delivery_Time, .pred_class)
data_validation_cla %>%
select(Delivery_Time) %>%
bind_cols(predict(rf_model, new_data=data_validation_cla)) %>%
accuracy(truth = Delivery_Time, .pred_class)
set.seed(190)
rf_model <- rand_forest(mode = "classification",
engine = "ranger",
mtry = 10,
trees = 500) %>%
fit(Delivery_Time ~ ., data = data_train_cla)
data_validation_cla %>%
select(Delivery_Time) %>%
bind_cols(predict(rf_model, new_data=data_validation_cla)) %>%
accuracy(truth = Delivery_Time, .pred_class)
data_train_cla %>%
select(Delivery_Time) %>%
bind_cols(predict(rf_model, new_data=data_train_cla)) %>%
accuracy(truth = Delivery_Time, .pred_class)
set.seed(190)
rf_model <- rand_forest(mode = "classification",
engine = "ranger",
mtry = 10,
trees = 100) %>%
fit(Delivery_Time ~ ., data = data_train_cla)
data_train_cla %>%
select(Delivery_Time) %>%
bind_cols(predict(rf_model, new_data=data_train_cla)) %>%
accuracy(truth = Delivery_Time, .pred_class)
data_validation_cla %>%
select(Delivery_Time) %>%
bind_cols(predict(rf_model, new_data=data_validation_cla)) %>%
accuracy(truth = Delivery_Time, .pred_class)
set.seed(190)
rf_model <- rand_forest(mode = "classification",
engine = "ranger",
mtry = 25,
trees = 100) %>%
fit(Delivery_Time ~ ., data = data_train_cla)
data_train_cla %>%
select(Delivery_Time) %>%
bind_cols(predict(rf_model, new_data=data_train_cla)) %>%
accuracy(truth = Delivery_Time, .pred_class)
data_validation_cla %>%
select(Delivery_Time) %>%
bind_cols(predict(rf_model, new_data=data_validation_cla)) %>%
accuracy(truth = Delivery_Time, .pred_class)
set.seed(190)
rf_model <- rand_forest(mode = "classification",
engine = "ranger",
mtry = 20,
trees = 100) %>%
fit(Delivery_Time ~ ., data = data_train_cla)
data_train_cla %>%
select(Delivery_Time) %>%
bind_cols(predict(rf_model, new_data=data_train_cla)) %>%
accuracy(truth = Delivery_Time, .pred_class)
data_validation_cla %>%
select(Delivery_Time) %>%
bind_cols(predict(rf_model, new_data=data_validation_cla)) %>%
accuracy(truth = Delivery_Time, .pred_class)
set.seed(190)
rf_model <- rand_forest(mode = "classification",
engine = "ranger",
mtry = 5,
trees = 100) %>%
fit(Delivery_Time ~ ., data = data_train_cla)
data_validation_cla %>%
select(Delivery_Time) %>%
bind_cols(predict(rf_model, new_data=data_validation_cla)) %>%
accuracy(truth = Delivery_Time, .pred_class)
data_train_cla %>%
select(Delivery_Time) %>%
bind_cols(predict(rf_model, new_data=data_train_cla)) %>%
accuracy(truth = Delivery_Time, .pred_class)
