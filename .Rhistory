training(splitted)
transform_location <- function(Location){
if(Location %in% c("Mumbai", "Mumbai CST Area" , "Mumbai Central")){
return ("Mumbai")
} else if(Location %in% c("Bangalore", "Electronic City", "Marathalli", "Whitefield")){
return("Bangalore")
} else if(Location %in% c("India Gate", "Delhi", "Delhi University-GTB Nagar", "Delhi Cantt." , "Timarpur", "Noida")){
return("Delhi")
} else if(Location %in% c("Gurgoan", "Gurgaon")){
return("Gurgaon")
} else if(Location %in% c("Maharashtra", "Pune", "Pune University")){
return("Maharashtra")
} else if(Location %in% c("Hyderabad", "Begumpet", "Majestic")){
return("Hyderabad")
} else if(Location %in% c("Kolkata")){
return("Kolkata")
}
}
rec <- recipe(Delivery_Time~., data = training(splitted)) %>%
step_select(-Restaurant) %>%
step_mutate(
Location =  word(Location, -1, sep=",") %>% trimws() %>% sapply(function(x) transform_location(x)),
Average_Cost = gsub('[\u20b9]|,', '', Average_Cost) %>% as.numeric(),
Minimum_Order = gsub('[\u20b9]|,', '', Minimum_Order) %>% as.numeric(),
Rating = as.character(Rating) %>% as.numeric(),
Votes = as.character(Votes) %>% as.numeric(),
Reviews = as.character(Reviews) %>% as.numeric(),
Delivery_Time = gsub('[ minutes]', '', train_data$Delivery_Time) %>%  as.numeric()
) %>%
step_dummy_extract(Cuisines, sep= ", ") %>%
prep()
training_splitted
training(splitted)
transform_location <- function(Location){
if(Location %in% c("Mumbai", "Mumbai CST Area" , "Mumbai Central")){
return ("Mumbai")
} else if(Location %in% c("Bangalore", "Electronic City", "Marathalli", "Whitefield")){
return("Bangalore")
} else if(Location %in% c("India Gate", "Delhi", "Delhi University-GTB Nagar", "Delhi Cantt." , "Timarpur", "Noida")){
return("Delhi")
} else if(Location %in% c("Gurgoan", "Gurgaon")){
return("Gurgaon")
} else if(Location %in% c("Maharashtra", "Pune", "Pune University")){
return("Maharashtra")
} else if(Location %in% c("Hyderabad", "Begumpet", "Majestic")){
return("Hyderabad")
} else if(Location %in% c("Kolkata")){
return("Kolkata")
}
}
rec <- recipe(Delivery_Time~., data = training(splitted)) %>%
step_select(-Restaurant) %>%
step_mutate(
Location =  word(Location, -1, sep=",") %>% trimws() %>% sapply(function(x) transform_location(x)),
Average_Cost = gsub('[\u20b9]|,', '', Average_Cost) %>% as.numeric(),
Minimum_Order = gsub('[\u20b9]|,', '', Minimum_Order) %>% as.numeric(),
Rating = as.character(Rating) %>% as.numeric(),
Votes = as.character(Votes) %>% as.numeric(),
Reviews = as.character(Reviews) %>% as.numeric(),
Delivery_Time = gsub('[ minutes]', '', Delivery_Time) %>%  as.numeric()
) %>%
step_dummy_extract(Cuisines, sep= ", ") %>%
prep()
head(data_train)
data_train <- juice(rec)
head(data_train)
colSums(is.na(data_train))
transform_location <- function(Location){
if(Location %in% c("Mumbai", "Mumbai CST Area" , "Mumbai Central")){
return ("Mumbai")
} else if(Location %in% c("Bangalore", "Electronic City", "Marathalli", "Whitefield")){
return("Bangalore")
} else if(Location %in% c("India Gate", "Delhi", "Delhi University-GTB Nagar", "Delhi Cantt." , "Timarpur", "Noida")){
return("Delhi")
} else if(Location %in% c("Gurgoan", "Gurgaon")){
return("Gurgaon")
} else if(Location %in% c("Maharashtra", "Pune", "Pune University")){
return("Maharashtra")
} else if(Location %in% c("Hyderabad", "Begumpet", "Majestic")){
return("Hyderabad")
} else if(Location %in% c("Kolkata")){
return("Kolkata")
}
}
rec <- recipe(Delivery_Time~., data = training(splitted)) %>%
step_select(-Restaurant) %>%
step_mutate(
Location =  word(Location, -1, sep=",") %>% trimws() %>% sapply(function(x) transform_location(x)),
Average_Cost = gsub('[\u20b9]|,', '', Average_Cost) %>% as.numeric(),
Minimum_Order = gsub('[\u20b9]|,', '', Minimum_Order) %>% as.numeric(),
Rating = as.character(Rating) %>% as.numeric(),
Votes = as.character(Votes) %>% as.numeric(),
Reviews = as.character(Reviews) %>% as.numeric(),
Delivery_Time = gsub('[ minutes]', '', Delivery_Time) %>%  as.numeric()
) %>%
step_dummy_extract(Cuisines, sep= ", ") %>%
step_naomit() %>%
prep()
data_train <- juice(rec)
head(data_train)
colSums(is.na(data_train))
data_train <- juice(rec)
data_validation <- bake(rec, testing(splitted))
head(data_train)
head(data_validation)
colSums(is.na(data_train))
transform_location <- function(Location){
if(Location %in% c("Mumbai", "Mumbai CST Area" , "Mumbai Central")){
return ("Mumbai")
} else if(Location %in% c("Bangalore", "Electronic City", "Marathalli", "Whitefield")){
return("Bangalore")
} else if(Location %in% c("India Gate", "Delhi", "Delhi University-GTB Nagar", "Delhi Cantt." , "Timarpur", "Noida")){
return("Delhi")
} else if(Location %in% c("Gurgoan", "Gurgaon")){
return("Gurgaon")
} else if(Location %in% c("Maharashtra", "Pune", "Pune University")){
return("Maharashtra")
} else if(Location %in% c("Hyderabad", "Begumpet", "Majestic")){
return("Hyderabad")
} else if(Location %in% c("Kolkata")){
return("Kolkata")
}
}
rec <- recipe(Delivery_Time~., data = training(splitted)) %>%
step_select(-Restaurant) %>%
step_mutate(
Location =  word(Location, -1, sep=",") %>% trimws() %>% sapply(function(x) transform_location(x)),
Average_Cost = gsub('[\u20b9]|,', '', Average_Cost) %>% as.numeric(),
Minimum_Order = gsub('[\u20b9]|,', '', Minimum_Order) %>% as.numeric(),
Rating = as.character(Rating) %>% as.numeric(),
Votes = as.character(Votes) %>% as.numeric(),
Reviews = as.character(Reviews) %>% as.numeric(),
Delivery_Time = gsub('[ minutes]', '', Delivery_Time) %>%  as.numeric()
) %>%
step_dummy_extract(Cuisines, sep= ", ") %>%
step_naomit() %>%
prep()
data_train <- juice(rec)
data_validation <- bake(rec, testing(splitted))
head(data_train)
head(data_validation)
colSums(is.na(data_train))
transform_location <- function(Location){
if(Location %in% c("Mumbai", "Mumbai CST Area" , "Mumbai Central")){
return ("Mumbai")
} else if(Location %in% c("Bangalore", "Electronic City", "Marathalli", "Whitefield")){
return("Bangalore")
} else if(Location %in% c("India Gate", "Delhi", "Delhi University-GTB Nagar", "Delhi Cantt." , "Timarpur", "Noida")){
return("Delhi")
} else if(Location %in% c("Gurgoan", "Gurgaon")){
return("Gurgaon")
} else if(Location %in% c("Maharashtra", "Pune", "Pune University")){
return("Maharashtra")
} else if(Location %in% c("Hyderabad", "Begumpet", "Majestic")){
return("Hyderabad")
} else if(Location %in% c("Kolkata")){
return("Kolkata")
}
}
rec <- recipe(Delivery_Time~., data = training(splitted)) %>%
step_select(-Restaurant) %>%
step_mutate(
Location =  word(Location, -1, sep=",") %>% trimws() %>% sapply(function(x) transform_location(x)),
Average_Cost = gsub('[\u20b9]|,', '', Average_Cost) %>% as.numeric(),
Minimum_Order = gsub('[\u20b9]|,', '', Minimum_Order) %>% as.numeric(),
Rating = as.character(Rating) %>% as.numeric(),
Votes = as.character(Votes) %>% as.numeric(),
Reviews = as.character(Reviews) %>% as.numeric(),
Delivery_Time = gsub('[ minutes]', '', Delivery_Time) %>%  as.numeric()
) %>%
step_dummy_extract(Cuisines, sep= ", ") %>%
step_naomit(Rating) %>%
prep()
data_train <- juice(rec)
data_validation <- bake(rec, testing(splitted))
head(data_train)
head(data_validation)
colSums(is.na(data_train))
transform_location <- function(Location){
if(Location %in% c("Mumbai", "Mumbai CST Area" , "Mumbai Central")){
return ("Mumbai")
} else if(Location %in% c("Bangalore", "Electronic City", "Marathalli", "Whitefield")){
return("Bangalore")
} else if(Location %in% c("India Gate", "Delhi", "Delhi University-GTB Nagar", "Delhi Cantt." , "Timarpur", "Noida")){
return("Delhi")
} else if(Location %in% c("Gurgoan", "Gurgaon")){
return("Gurgaon")
} else if(Location %in% c("Maharashtra", "Pune", "Pune University")){
return("Maharashtra")
} else if(Location %in% c("Hyderabad", "Begumpet", "Majestic")){
return("Hyderabad")
} else if(Location %in% c("Kolkata")){
return("Kolkata")
}
}
rec <- recipe(Delivery_Time~., data = training(splitted)) %>%
step_select(-Restaurant) %>%
step_mutate(
Location =  word(Location, -1, sep=",") %>% trimws() %>% sapply(function(x) transform_location(x)),
Average_Cost = gsub('[\u20b9]|,', '', Average_Cost) %>% as.numeric(),
Minimum_Order = gsub('[\u20b9]|,', '', Minimum_Order) %>% as.numeric(),
Rating = as.character(Rating) %>% as.numeric(),
Votes = as.character(Votes) %>% as.numeric(),
Reviews = as.character(Reviews) %>% as.numeric(),
Delivery_Time = gsub('[ minutes]', '', Delivery_Time) %>%  as.numeric()
) %>%
step_dummy_extract(Cuisines, sep= ", ") %>%
step_naomit(.) %>%
prep()
data_train <- juice(rec)
data_validation <- bake(rec, testing(splitted))
head(data_train)
head(data_validation)
colSums(is.na(data_train))
transform_location <- function(Location){
if(Location %in% c("Mumbai", "Mumbai CST Area" , "Mumbai Central")){
return ("Mumbai")
} else if(Location %in% c("Bangalore", "Electronic City", "Marathalli", "Whitefield")){
return("Bangalore")
} else if(Location %in% c("India Gate", "Delhi", "Delhi University-GTB Nagar", "Delhi Cantt." , "Timarpur", "Noida")){
return("Delhi")
} else if(Location %in% c("Gurgoan", "Gurgaon")){
return("Gurgaon")
} else if(Location %in% c("Maharashtra", "Pune", "Pune University")){
return("Maharashtra")
} else if(Location %in% c("Hyderabad", "Begumpet", "Majestic")){
return("Hyderabad")
} else if(Location %in% c("Kolkata")){
return("Kolkata")
}
}
rec <- recipe(Delivery_Time~., data = training(splitted)) %>%
step_select(-Restaurant) %>%
step_mutate(
Location =  word(Location, -1, sep=",") %>% trimws() %>% sapply(function(x) transform_location(x)),
Average_Cost = gsub('[\u20b9]|,', '', Average_Cost) %>% as.numeric(),
Minimum_Order = gsub('[\u20b9]|,', '', Minimum_Order) %>% as.numeric(),
Rating = as.character(Rating) %>% as.numeric(),
Votes = as.character(Votes) %>% as.numeric(),
Reviews = as.character(Reviews) %>% as.numeric(),
Delivery_Time = gsub('[ minutes]', '', Delivery_Time) %>%  as.numeric()
) %>%
step_dummy_extract(Cuisines, sep= ", ") %>%
step_naomit() %>%
prep()
transform_location <- function(Location){
if(Location %in% c("Mumbai", "Mumbai CST Area" , "Mumbai Central")){
return ("Mumbai")
} else if(Location %in% c("Bangalore", "Electronic City", "Marathalli", "Whitefield")){
return("Bangalore")
} else if(Location %in% c("India Gate", "Delhi", "Delhi University-GTB Nagar", "Delhi Cantt." , "Timarpur", "Noida")){
return("Delhi")
} else if(Location %in% c("Gurgoan", "Gurgaon")){
return("Gurgaon")
} else if(Location %in% c("Maharashtra", "Pune", "Pune University")){
return("Maharashtra")
} else if(Location %in% c("Hyderabad", "Begumpet", "Majestic")){
return("Hyderabad")
} else if(Location %in% c("Kolkata")){
return("Kolkata")
}
}
rec <- recipe(Delivery_Time~., data = training(splitted)) %>%
step_select(-Restaurant) %>%
step_mutate(
Location =  word(Location, -1, sep=",") %>% trimws() %>% sapply(function(x) transform_location(x)),
Average_Cost = gsub('[\u20b9]|,', '', Average_Cost) %>% as.numeric(),
Minimum_Order = gsub('[\u20b9]|,', '', Minimum_Order) %>% as.numeric(),
Rating = as.character(Rating) %>% as.numeric(),
Votes = as.character(Votes) %>% as.numeric(),
Reviews = as.character(Reviews) %>% as.numeric(),
Delivery_Time = gsub('[ minutes]', '', Delivery_Time) %>%  as.numeric()
) %>%
step_dummy_extract(Cuisines, sep= ", ") %>%
step_naomit(everything()) %>%
prep()
data_train <- juice(rec)
data_validation <- bake(rec, testing(splitted))
head(data_train)
head(data_validation)
colSums(is.na(data_train))
is.na(data_train)
any(is.na(data_train))
any(is.na(data_train))
any(is.na(data_validation))
View(data_train)
str(data_train)
reg_model <- linear_reg(mode = "regression",
engine = "lm") %>%
fit(formula=Delivery_Time ~ Location + Average_Cost + Minimum_Order + Rating + Votes + Reviews,
data=data_train)
summary(reg_model)
reg_model <- linear_reg(mode = "regression",
engine = "lm") %>%
fit(formula=Delivery_Time ~ Location + Average_Cost + Minimum_Order + Rating + Votes + Reviews,
data=data_train)
reg_model
multi_model <- multinom_reg(mode = "classification",
engine = nnet) %>%
fit(formula=Delivery_Time ~ Location + Average_Cost + Minimum_Order + Rating + Votes + Reviews,
data=data_train)
library(nnet)
multi_model <- multinom_reg(mode = "classification",
engine = nnet) %>%
fit(formula=Delivery_Time ~ Location + Average_Cost + Minimum_Order + Rating + Votes + Reviews,
data=data_train)
library(nnet)
multi_model <- multinom_reg(mode = "classification",
engine = nnet) %>%
fit(formula=Delivery_Time ~ Location + Average_Cost + Minimum_Order + Rating + Votes + Reviews,
data=data_train)
transform_location <- function(Location){
if(Location %in% c("Mumbai", "Mumbai CST Area" , "Mumbai Central")){
return ("Mumbai")
} else if(Location %in% c("Bangalore", "Electronic City", "Marathalli", "Whitefield")){
return("Bangalore")
} else if(Location %in% c("India Gate", "Delhi", "Delhi University-GTB Nagar", "Delhi Cantt." , "Timarpur", "Noida")){
return("Delhi")
} else if(Location %in% c("Gurgoan", "Gurgaon")){
return("Gurgaon")
} else if(Location %in% c("Maharashtra", "Pune", "Pune University")){
return("Maharashtra")
} else if(Location %in% c("Hyderabad", "Begumpet", "Majestic")){
return("Hyderabad")
} else if(Location %in% c("Kolkata")){
return("Kolkata")
}
}
rec <- recipe(Delivery_Time~., data = training(splitted)) %>%
step_select(-Restaurant) %>%
step_mutate(
Location =  word(Location, -1, sep=",") %>% trimws() %>% sapply(function(x) transform_location(x)),
Average_Cost = gsub('[\u20b9]|,', '', Average_Cost) %>% as.numeric(),
Minimum_Order = gsub('[\u20b9]|,', '', Minimum_Order) %>% as.numeric(),
Rating = as.character(Rating) %>% as.numeric(),
Votes = as.character(Votes) %>% as.numeric(),
Reviews = as.character(Reviews) %>% as.numeric(),
Delivery_Time = gsub('[ minutes]', '', Delivery_Time) %>%  as.factor()
) %>%
step_dummy_extract(Cuisines, sep= ", ") %>%
step_naomit(everything()) %>%
prep()
data_train <- juice(rec)
data_validation <- bake(rec, testing(splitted))
head(data_train)
head(data_validation)
library(nnet)
multi_model <- multinom_reg(mode = "classification",
engine = nnet) %>%
fit(formula=Delivery_Time ~ Location + Average_Cost + Minimum_Order + Rating + Votes + Reviews,
data=data_train)
data_train
library(nnet)
multi_model <- multinom_reg(mode = "classification",
engine = nnet) %>%
fit(formula=Delivery_Time ~ Location + Average_Cost + Minimum_Order + Rating + Votes + Reviews,
data=data_train, size = 10, maxit=100)
library(nnet)
multi_model <- multinom_reg(mode = "classification",
engine = nnet) %>%
fit(formula=Delivery_Time ~ Location + Average_Cost + Minimum_Order + Rating + Votes + Reviews,
data=data_train, size = 10, maxit=100)
library(nnet)
multi_model <- multinom_reg(mode = "classification",
engine = nnet) %>%
fit(formula=Delivery_Time ~ Location + Average_Cost + Minimum_Order + Rating + Votes + Reviews,
data=data_train, size = 10, maxit=100)
library(nnet)
multi_model <- multinom_reg(mode = "classification",
engine = nnet) %>%
fit(formula=Delivery_Time ~ .,
data=data_train, size = 10, maxit=100)
install.packages("keras")
library(nnet)
multi_model <- multinom_reg(mode = "classification",
engine = "nnet") %>%
fit(formula=Delivery_Time ~ .,
data=data_train, size = 10, maxit=100)
multi_model
library(nnet)
multi_model <- multinom_reg(mode = "classification",
engine = "nnet") %>%
fit(formula=Delivery_Time ~ .,
data=data_train, size = 10, maxit=100)
predict(multi_model, new_data=data_validation)
str(data_validation)
data_validation %>%
select(Delivery_Time) %>%
bind_cols(predict(multi_model, new_data=data_validation))
data_validation %>%
select(Delivery_Time) %>%
bind_cols(predict(multi_model, new_data=data_validation)) %>%
accuracy(truth = Delivery_Time, .pred_class)
data_validation %>%
select(Delivery_Time) %>%
bind_cols(predict(multi_model, new_data=data_validation)) %>%
conf_mat(truth = Delivery_Time, .pred_class)
data_validation %>%
select(Delivery_Time) %>%
bind_cols(predict(multi_model, new_data=data_validation)) %>%
accuracy(truth = Delivery_Time, .pred_class)
transform_location <- function(Location){
if(Location %in% c("Mumbai", "Mumbai CST Area" , "Mumbai Central")){
return ("Mumbai")
} else if(Location %in% c("Bangalore", "Electronic City", "Marathalli", "Whitefield")){
return("Bangalore")
} else if(Location %in% c("India Gate", "Delhi", "Delhi University-GTB Nagar", "Delhi Cantt." , "Timarpur", "Noida")){
return("Delhi")
} else if(Location %in% c("Gurgoan", "Gurgaon")){
return("Gurgaon")
} else if(Location %in% c("Maharashtra", "Pune", "Pune University")){
return("Maharashtra")
} else if(Location %in% c("Hyderabad", "Begumpet", "Majestic")){
return("Hyderabad")
} else if(Location %in% c("Kolkata")){
return("Kolkata")
}
}
rec <- recipe(Delivery_Time~., data = training(splitted)) %>%
step_select(-Restaurant) %>%
step_mutate(
Location =  word(Location, -1, sep=",") %>% trimws() %>% sapply(function(x) transform_location(x)),
Average_Cost = gsub('[\u20b9]|,', '', Average_Cost) %>% as.numeric(),
Minimum_Order = gsub('[\u20b9]|,', '', Minimum_Order) %>% as.numeric(),
Rating = as.character(Rating) %>% as.numeric(),
Votes = as.character(Votes) %>% as.numeric(),
Reviews = as.character(Reviews) %>% as.numeric(),
Delivery_Time = gsub('[ minutes]', '', Delivery_Time) %>%  as.numeric()
) %>%
step_dummy_extract(Cuisines, sep= ", ") %>%
step_naomit(everything()) %>%
prep()
data_train <- juice(rec)
data_validation <- bake(rec, testing(splitted))
head(data_train)
head(data_validation)
any(is.na(data_train))
any(is.na(data_validation))
reg_model <- linear_reg(mode = "regression",
engine = "lm") %>%
fit(formula=Delivery_Time ~ Location + Average_Cost + Minimum_Order + Rating + Votes + Reviews,
data=data_train)
reg_model
data_validation %>%
select(Delivery_Time) %>%
bind_cols(predict(reg_model, new_data = data_validation))
result <- data_validation %>%
select(Delivery_Time) %>%
bind_cols(predict(reg_model, new_data = data_validation))
library(MLmetrics)
mape(result$Delivery_Time, result$.pred)
result <- data_validation %>%
select(Delivery_Time) %>%
bind_cols(predict(reg_model, new_data = data_validation))
library(MLmetrics)
MAPE(result$Delivery_Time, result$.pred)
transform_location <- function(Location){
if(Location %in% c("Mumbai", "Mumbai CST Area" , "Mumbai Central")){
return ("Mumbai")
} else if(Location %in% c("Bangalore", "Electronic City", "Marathalli", "Whitefield")){
return("Bangalore")
} else if(Location %in% c("India Gate", "Delhi", "Delhi University-GTB Nagar", "Delhi Cantt." , "Timarpur", "Noida")){
return("Delhi")
} else if(Location %in% c("Gurgoan", "Gurgaon")){
return("Gurgaon")
} else if(Location %in% c("Maharashtra", "Pune", "Pune University")){
return("Maharashtra")
} else if(Location %in% c("Hyderabad", "Begumpet", "Majestic")){
return("Hyderabad")
} else if(Location %in% c("Kolkata")){
return("Kolkata")
}
}
rec <- recipe(Delivery_Time~., data = training(splitted)) %>%
step_select(-Restaurant) %>%
step_mutate(
Location =  word(Location, -1, sep=",") %>% trimws() %>% sapply(function(x) transform_location(x)),
Average_Cost = gsub('[\u20b9]|,', '', Average_Cost) %>% as.numeric(),
Minimum_Order = gsub('[\u20b9]|,', '', Minimum_Order) %>% as.numeric(),
Rating = as.character(Rating) %>% as.numeric(),
Votes = as.character(Votes) %>% as.numeric(),
Reviews = as.character(Reviews) %>% as.numeric(),
Delivery_Time = gsub('[ minutes]', '', Delivery_Time) %>%  as.factor()
) %>%
step_dummy_extract(Cuisines, sep= ", ") %>%
step_naomit(everything()) %>%
prep()
data_train <- juice(rec)
data_validation <- bake(rec, testing(splitted))
head(data_train)
head(data_validation)
set.seed(190)
rf_model <- rand_forest(mode = "classification",
engine = "ranger",
mtry = 10,
trees = 1000) %>%
fit(Delivery_Time ~ ., data = data_train)
install.packages("ranger")
set.seed(190)
rf_model <- rand_forest(mode = "classification",
engine = "ranger",
mtry = 10,
trees = 1000) %>%
fit(Delivery_Time ~ ., data = data_train)
data_validation %>%
select(Delivery_Time) %>%
bind_cols(predict(rf_model, new_data=data_validation)) %>%
accuracy(truth = Delivery_Time, .pred_class)
warnings()
unlink('FoodDeliveryTime_cache', recursive = TRUE)
knit_with_parameters('~/DSS Project Algoritma/FoodDeliveryTime/FoodDeliveryTime.Rmd')
library(rmarkdown)
